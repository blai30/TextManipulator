@page "/manipulator"
@using System.Text.RegularExpressions

<h3>Manipulator</h3>

<Space Direction="vertical"
       Style="width: 100%;">
    <SpaceItem>
        <TextArea Placeholder="Input" MinRows="4" MaxRows="4" @bind-Value="@InputText" />
    </SpaceItem>

    <SpaceItem>
        <Form
            Layout="@(FormLayout.Vertical)"
            Loading="Loading"
            Model="@Model">

            <FormItem>
                <RadioGroup ButtonStyle="solid" @bind-Value="@Model.TextCase">
                    <Radio RadioButton Value="@(TextCase.Unchanged)">Unchanged</Radio>
                    <Radio RadioButton Value="@(TextCase.UpperCase)">UPPER CASE</Radio>
                    <Radio RadioButton Value="@(TextCase.LowerCase)">lower case</Radio>
                    <Radio RadioButton Value="@(TextCase.SentenceCase)">Sentence case</Radio>
                    <Radio RadioButton Value="@(TextCase.TitleCase)">Title Case</Radio>
                    <Radio RadioButton Value="@(TextCase.CamelCase)">camelCase</Radio>
                    <Radio RadioButton Value="@(TextCase.PascalCase)">PascalCase</Radio>
                    <Radio RadioButton Value="@(TextCase.SnakeCase)">snake_case</Radio>
                    <Radio RadioButton Value="@(TextCase.KebabCase)">kebab-case</Radio>
                    <Radio RadioButton Value="@(TextCase.RandomCase)">rAnDOm caSe</Radio>
                </RadioGroup>
            </FormItem>

            <FormItem>
                <Checkbox @bind-Value="@Model.ClapItUp">
                    Clap 👏 it 👏 up!
                </Checkbox>
            </FormItem>

            <FormItem Label="Character Limit">
                <AntDesign.InputNumber @bind-Value="Model.CharLimit" Max="2147483647" />
            </FormItem>

            <FormItem>
                <Button Size="large" Type="primary" Block @onclick="Manipulate">Manipulate</Button>
            </FormItem>
        </Form>
    </SpaceItem>

    <SpaceItem>
        <TextArea Placeholder="Output" MinRows="4" MaxRows="4" @bind-Value="@OutputText" />
    </SpaceItem>
</Space>

@code
{
    private bool Loading { get; set; } = false;
    private string InputText { get; set; }
    private string OutputText { get; set; }
    private FormModel Model { get; set; } = new();

    private Random Random { get; set; } = new(new Guid().GetHashCode());

    private class FormModel
    {
        public TextCase TextCase { get; set; } = TextCase.Unchanged;
        public bool ClapItUp { get; set; }
        public int? CharLimit { get; set; }
    }

    private enum TextCase
    {
        Unchanged,
        UpperCase,
        LowerCase,
        SentenceCase,
        TitleCase,
        CamelCase,
        PascalCase,
        SnakeCase,
        KebabCase,
        RandomCase
    }

    private void Manipulate()
    {
        if (string.IsNullOrEmpty(InputText))
        {
            return;
        }

        Loading = true;

        string input = InputText;
        input = input.Trim();

        // Shrink excess spaces.
        var regex = new Regex(@"\s+");
        input = regex.Replace(input, " ");

        if (Model.ClapItUp)
        {
            input = input.Replace(" ", " 👏 ");
        }

        input = Model.TextCase switch
        {
            TextCase.Unchanged => input,
            TextCase.UpperCase => input.ToUpper(),
            TextCase.LowerCase => input.ToLower(),
            TextCase.CamelCase => input.Camelize(),
            TextCase.PascalCase => input.Pascalize(),
            TextCase.SentenceCase => input.Transform(To.SentenceCase),
            TextCase.TitleCase => input.Titleize(),
            TextCase.SnakeCase => input.Underscore(),
            TextCase.KebabCase => input.Kebaberize(),
            TextCase.RandomCase => RandomCase(input),
            _ => input
        };

        if (Model.CharLimit != null)
        {
            input = input.Truncate((int) Model.CharLimit, "");
        }

        OutputText = input;
        Loading = false;
    }

    private string RandomCase(string input)
    {
        string result = string.Empty;

        do
        {
            foreach (char c in input)
            {
                int next = Random.Next(2);

                result += next switch
                {
                    0 => char.ToUpper(c).ToString(),
                    1 => char.ToLower(c).ToString(),
                    _ => c.ToString()
                };
            }
        } while (result == input);

        return result;
    }
}
